#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef BECOMAP_IOS_SWIFT_H
#define BECOMAP_IOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="becomap_ios",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Represents a building within a site in the becomap system.
/// A building contains multiple floors and is part of a larger site. This class
/// holds metadata about the building including its name, floors, and other
/// building-specific information.
SWIFT_CLASS("_TtC11becomap_ios10BCBuilding")
@interface BCBuilding : NSObject
/// Default initializer for BCBuilding.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Cache state enumeration for tracking cache population status
typedef SWIFT_ENUM(NSInteger, BCCacheState, open) {
  BCCacheStateEmpty = 0,
  BCCacheStatePopulating = 1,
  BCCacheStateReady = 2,
  BCCacheStateError = 3,
};

/// Represents a category for organizing locations within the becomap system.
/// Categories help users filter and find locations of interest by grouping them
/// into logical collections such as “Food & Beverage”, “Shopping”, “Services”, etc.
/// Each category has visual properties like icons and colors for display purposes.
SWIFT_CLASS("_TtC11becomap_ios10BCCategory")
@interface BCCategory : NSObject
/// Default initializer for BCCategory.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents color information for categories and other visual elements.
/// Provides color data in multiple formats (RGBA, HEX) with opacity support
/// for consistent visual styling across the application.
SWIFT_CLASS("_TtC11becomap_ios7BCColor")
@interface BCColor : NSObject
/// Default initializer for BCColor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
/// Represents a happening/event at a specific location within the site.
/// Happenings are time-based events, offers, or news that provide value to
/// visitors. They can include promotions, announcements, or special events
/// happening at specific locations within the site.
SWIFT_CLASS("_TtC11becomap_ios12BCHappenings")
@interface BCHappenings : NSObject
/// Unique identifier for the happening
@property (nonatomic, copy) NSString * _Nonnull id;
/// Human-readable name of the happening
@property (nonatomic, copy) NSString * _Nonnull name;
/// Detailed description of the happening
@property (nonatomic, copy) NSString * _Nonnull descriptionText;
/// Start date of the happening (ISO format)
@property (nonatomic, copy) NSString * _Nonnull startDate;
/// End date of the happening (ISO format)
@property (nonatomic, copy) NSString * _Nonnull endDate;
/// Date when the happening should be displayed
@property (nonatomic, copy) NSString * _Nonnull showDate;
/// External system identifier (if applicable)
@property (nonatomic, copy) NSString * _Nonnull externalId;
/// ID of the site where this happening occurs
@property (nonatomic, copy) NSString * _Nonnull siteId;
/// ID of the specific location where this happening occurs
@property (nonatomic, copy) NSString * _Nonnull locationId;
/// URLs for images associated with the happening
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull images;
/// Type of happening (offer, news, event)
@property (nonatomic, copy) NSString * _Nonnull type;
/// Priority level for display ordering (higher numbers = higher priority)
@property (nonatomic) NSInteger priority;
/// Additional custom fields specific to this happening
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull customFields;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents image URLs for a site in different sizes.
/// Provides URLs for site images in various dimensions for different use cases.
SWIFT_CLASS("_TtC11becomap_ios11BCImageURLs")
@interface BCImageURLs : NSObject
/// URL for small-sized image (thumbnail)
@property (nonatomic, readonly, copy) NSString * _Nullable small;
/// URL for original/full-sized image
@property (nonatomic, readonly, copy) NSString * _Nullable original;
/// URL for large-sized image
@property (nonatomic, readonly, copy) NSString * _Nullable large;
/// URL for medium-sized image
@property (nonatomic, readonly, copy) NSString * _Nullable medium;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents a language supported by the site.
/// This class contains information about languages available for the site,
/// including language codes and display names for internationalization support.
SWIFT_CLASS("_TtC11becomap_ios10BCLanguage")
@interface BCLanguage : NSObject
/// Default initializer for BCLanguage.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a link associated with a location.
/// Links can be URLs to websites, social media pages, or other external resources
/// related to the location.
SWIFT_CLASS("_TtC11becomap_ios6BCLink")
@interface BCLink : NSObject
/// Default initializer for BCLink.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a point of interest or location within a site.
/// A location can be any point of interest such as a store, amenity, entrance, or
/// other facility within the site. This class contains all the metadata about the
/// location including its name, type, contact information, and operational details.
SWIFT_CLASS("_TtC11becomap_ios10BCLocation")
@interface BCLocation : NSObject
/// Default initializer for BCLocation.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a floor within a building in the becomap system.
/// A floor contains the map data, viewport settings, and elevation information
/// for a specific level within a building. This class is used to manage floor-specific
/// data and provide navigation between different floors.
SWIFT_CLASS("_TtC11becomap_ios10BCMapFloor")
@interface BCMapFloor : NSObject
/// Default initializer for BCMapFloor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BCMapViewDelegate;
@class NSCoder;
@class UIColor;
SWIFT_CLASS("_TtC11becomap_ios9BCMapView")
@interface BCMapView : UIView
/// Delegate for receiving map view callbacks
@property (nonatomic, weak) id <BCMapViewDelegate> _Nullable delegate;
/// Current cache state
@property (nonatomic, readonly) enum BCCacheState cacheState;
/// Creates a new BCMapView programmatically.
/// You can create your map views programmatically. When creating a view, you typically specify its initial size and position relative to its future superview. To add BCMapView as a subview to another view, call the addSubview(_:) method on the superview.
/// \param frame The frame rectangle for the view, measured in points.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Creates a new BCMapView from a storyboard or XIB file.
/// \param coder The decoder object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer that creates a BCMapView with zero frame.
- (nonnull instancetype)init;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@end

@class BCSite;
@class BCRouteSegment;
SWIFT_PROTOCOL("_TtP11becomap_ios17BCMapViewDelegate_")
@protocol BCMapViewDelegate
/// mapView:didRenderSite:
/// <ul>
///   <li>
///     Invoked when a BCSite is successfully loaded and rendered in BCMapView.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param site BCSite reference
///
- (void)mapView:(BCMapView * _Nonnull)mapView didRenderSite:(BCSite * _Nonnull)site;
@optional
/// mapView:didLoadData:
/// <ul>
///   <li>
///     Called when the cache has been populated with all data after site rendering.
///   </li>
///   <li>
///     After this callback, synchronous data access methods will return cached data.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param success Boolean indicating if cache population was successful
///
- (void)mapView:(BCMapView * _Nonnull)mapView didLoadData:(BOOL)success;
/// mapView:didChangeView:
/// <ul>
///   <li>
///     Called when the map view changes (zoom, pan, etc.).
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param payload Any object containing view change data
///
- (void)mapView:(BCMapView * _Nonnull)mapView didChangeView:(id _Nonnull)payload;
/// mapView:didSelectLocation:
/// <ul>
///   <li>
///     Called when a location is selected on the map.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param location Any object containing location selected
///
- (void)mapView:(BCMapView * _Nonnull)mapView didSelectLocation:(BCLocation * _Nonnull)location;
/// mapView:didSwitchFloor:
/// <ul>
///   <li>
///     Called when the floor is switched on the map.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param floor Any object containing floor  data
///
- (void)mapView:(BCMapView * _Nonnull)mapView didSwitchFloor:(BCMapFloor * _Nonnull)floor;
/// mapView:didLoadStep:
/// <ul>
///   <li>
///     Called when a route step is loaded.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param step Any object containing step data
///
- (void)mapView:(BCMapView * _Nonnull)mapView didLoadStep:(id _Nonnull)step;
/// mapView:didEndWalkthrough:
/// <ul>
///   <li>
///     Called when route walkthrough ends.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
- (void)mapViewDidEndWalkthrough:(BCMapView * _Nonnull)mapView;
/// mapView:didReceiveCurrentFloor:
/// <ul>
///   <li>
///     Called when the current visible floor is determined or updated.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param floor The currently visible BCMapFloor
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveCurrentFloor:(BCMapFloor * _Nonnull)floor;
/// mapView:didReceiveRoute:
/// <ul>
///   <li>
///     Called when a navigation route is received.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param route Array of BCRouteSegment objects representing the navigation path
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveRoute:(NSArray<BCRouteSegment *> * _Nonnull)route;
/// mapView:didReceiveSearchResults:
/// <ul>
///   <li>
///     Called when a search query returns BCLocation results.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param results Array of BCLocation search results
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveSearchResults:(NSArray<BCLocation *> * _Nonnull)results;
/// mapView:didReceiveSearchCategories:
/// <ul>
///   <li>
///     Called when category search results are received.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param payload Any object containing category search results
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveSearchCategories:(NSArray<BCCategory *> * _Nonnull)categories;
@required
/// mapView:didReceiveError:
/// <ul>
///   <li>
///     Called when an error is received from the web interface.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param payload Any object containing error data
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveError:(id _Nonnull)payload;
@end

/// Represents viewport options for the map display.
/// This class contains settings that control how the map is displayed, including
/// zoom level, camera angle, orientation, and center position. These options
/// are used to configure the initial view and programmatically control the map view.
SWIFT_CLASS("_TtC11becomap_ios16BCMapViewOptions")
@interface BCMapViewOptions : NSObject
/// Default initializer for BCMapViewOptions.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents operating hours for a location or facility.
/// This class contains information about when a location is open and closed,
/// including the days of the week and specific opening/closing times.
/// Used for displaying availability information to users.
SWIFT_CLASS("_TtC11becomap_ios15BCOperationHour")
@interface BCOperationHour : NSObject
/// Default initializer for BCOperationHour.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents options for route calculation and navigation.
/// This class contains settings that control how routes are calculated,
/// including distance thresholds and accessibility preferences for
/// generating optimal navigation paths.
SWIFT_CLASS("_TtC11becomap_ios14BCRouteOptions")
@interface BCRouteOptions : NSObject
/// Default initializer for BCRouteOptions.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a segment of a navigation route.
/// A route segment contains multiple steps that form a logical part of the journey,
/// typically representing movement within a specific area or floor. Segments are
/// combined to form complete navigation routes between locations.
SWIFT_CLASS("_TtC11becomap_ios14BCRouteSegment")
@interface BCRouteSegment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents a single step in a navigation route.
/// A route step contains detailed instructions for a specific part of the journey,
/// including the action to take, direction, distance, and floor information.
/// Steps are combined to form complete route segments.
SWIFT_CLASS("_TtC11becomap_ios11BCRouteStep")
@interface BCRouteStep : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents a site/location in the becomap system.
/// A site is a physical location (like a mall, airport, hospital, etc.) that contains
/// multiple buildings, floors, and points of interest. This class holds all the metadata
/// about the site including its address, contact information, operating hours, and available languages.
SWIFT_CLASS("_TtC11becomap_ios6BCSite")
@interface BCSite : NSObject
/// Unique identifier for the site
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Human-readable name of the site
@property (nonatomic, readonly, copy) NSString * _Nullable siteName;
/// Street address of the site
@property (nonatomic, readonly, copy) NSString * _Nullable address;
/// City where the site is located
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// ISO country code (e.g., “US”, “CA”, “GB”)
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// Postal/ZIP code of the site
@property (nonatomic, readonly, copy) NSString * _Nullable postal;
/// State/province where the site is located
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Contact telephone number for the site
@property (nonatomic, readonly, copy) NSString * _Nullable telephone;
/// Timezone identifier (e.g., “America/New_York”)
@property (nonatomic, readonly, copy) NSString * _Nullable tzId;
/// UTC offset in hours (e.g., “-5” for EST)
@property (nonatomic, readonly, copy) NSString * _Nullable utcOffset;
/// Website URL for the site
@property (nonatomic, readonly, copy) NSString * _Nullable link;
/// Type/category of the site (e.g., “MALL”, “AIRPORT”, “HOSPITAL”)
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// List of buildings within this site
@property (nonatomic, readonly, copy) NSArray<BCBuilding *> * _Nonnull buildings;
/// URLs for site images in different sizes
@property (nonatomic, readonly, strong) BCImageURLs * _Nullable imageUrls;
/// Operating hours for different days of the week
@property (nonatomic, readonly, copy) NSArray<BCOperationHour *> * _Nonnull operationHours;
/// Additional languages supported by the site
@property (nonatomic, readonly, copy) NSArray<BCLanguage *> * _Nullable otherLanguages;
/// Primary language for the site
@property (nonatomic, readonly, strong) BCLanguage * _Nullable defaultLanguage;
/// Geographic center coordinates [latitude, longitude]
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull center;
/// Default map identifier for the site
@property (nonatomic, readonly, copy) NSString * _Nullable defaultMap;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
