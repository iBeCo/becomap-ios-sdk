#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef BECOMAP_IOS_SWIFT_H
#define BECOMAP_IOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="becomap_ios",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Represents a building within a site in the becomap system.
/// A building contains multiple floors and is part of a larger site. This class
/// holds metadata about the building including its name, floors, and other
/// building-specific information.
SWIFT_CLASS("_TtC11becomap_ios10BCBuilding")
@interface BCBuilding : NSObject
/// Default initializer for BCBuilding.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a category for organizing locations within the becomap system.
/// Categories help users filter and find locations of interest by grouping them
/// into logical collections such as “Food & Beverage”, “Shopping”, “Services”, etc.
/// Each category has visual properties like icons and colors for display purposes.
SWIFT_CLASS("_TtC11becomap_ios10BCCategory")
@interface BCCategory : NSObject
/// Default initializer for BCCategory.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents color information for categories and other visual elements.
/// Provides color data in multiple formats (RGBA, HEX) with opacity support
/// for consistent visual styling across the application.
SWIFT_CLASS("_TtC11becomap_ios7BCColor")
@interface BCColor : NSObject
/// Default initializer for BCColor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
/// Represents a happening/event at a specific location within the site.
/// Happenings are time-based events, offers, or news that provide value to
/// visitors. They can include promotions, announcements, or special events
/// happening at specific locations within the site.
SWIFT_CLASS("_TtC11becomap_ios12BCHappenings")
@interface BCHappenings : NSObject
/// Unique identifier for the happening
@property (nonatomic, copy) NSString * _Nonnull id;
/// Human-readable name of the happening
@property (nonatomic, copy) NSString * _Nonnull name;
/// Detailed description of the happening
@property (nonatomic, copy) NSString * _Nonnull descriptionText;
/// Start date of the happening (ISO format)
@property (nonatomic, copy) NSString * _Nonnull startDate;
/// End date of the happening (ISO format)
@property (nonatomic, copy) NSString * _Nonnull endDate;
/// Date when the happening should be displayed
@property (nonatomic, copy) NSString * _Nonnull showDate;
/// External system identifier (if applicable)
@property (nonatomic, copy) NSString * _Nonnull externalId;
/// ID of the site where this happening occurs
@property (nonatomic, copy) NSString * _Nonnull siteId;
/// ID of the specific location where this happening occurs
@property (nonatomic, copy) NSString * _Nonnull locationId;
/// URLs for images associated with the happening
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull images;
/// Type of happening (offer, news, event)
@property (nonatomic, copy) NSString * _Nonnull type;
/// Priority level for display ordering (higher numbers = higher priority)
@property (nonatomic) NSInteger priority;
/// Additional custom fields specific to this happening
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull customFields;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents image URLs for a site in different sizes.
/// Provides URLs for site images in various dimensions for different use cases.
SWIFT_CLASS("_TtC11becomap_ios11BCImageURLs")
@interface BCImageURLs : NSObject
/// URL for small-sized image (thumbnail)
@property (nonatomic, readonly, copy) NSString * _Nullable small;
/// URL for original/full-sized image
@property (nonatomic, readonly, copy) NSString * _Nullable original;
/// URL for large-sized image
@property (nonatomic, readonly, copy) NSString * _Nullable large;
/// URL for medium-sized image
@property (nonatomic, readonly, copy) NSString * _Nullable medium;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents a language supported by the site.
/// This class contains information about languages available for the site,
/// including language codes and display names for internationalization support.
SWIFT_CLASS("_TtC11becomap_ios10BCLanguage")
@interface BCLanguage : NSObject
/// Default initializer for BCLanguage.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a link associated with a location.
/// Links can be URLs to websites, social media pages, or other external resources
/// related to the location.
SWIFT_CLASS("_TtC11becomap_ios6BCLink")
@interface BCLink : NSObject
/// Default initializer for BCLink.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a point of interest or location within a site.
/// A location can be any point of interest such as a store, restaurant, amenity, entrance,
/// office, or other facility within the venue. This class contains comprehensive metadata
/// about the location including its identification, classification, contact information,
/// operational details, and visual assets.
/// <h2>Location Types</h2>
/// Locations can represent various types of points of interest:
/// <ul>
///   <li>
///     <em>Retail</em>: Stores, shops, boutiques
///   </li>
///   <li>
///     <em>Food & Beverage</em>: Restaurants, cafes, food courts
///   </li>
///   <li>
///     <em>Services</em>: ATMs, information desks, customer service
///   </li>
///   <li>
///     <em>Amenities</em>: Restrooms, parking, elevators, escalators
///   </li>
///   <li>
///     <em>Navigation</em>: Entrances, exits, waypoints
///   </li>
///   <li>
///     <em>Entertainment</em>: Cinemas, play areas, event spaces
///   </li>
/// </ul>
/// <h2>Usage Examples</h2>
/// \code
/// // Display location information
/// func displayLocation(_ location: BCLocation) {
///     nameLabel.text = location.name
///     descriptionLabel.text = location.locationDescription
///
///     // Show category badges
///     if let categories = location.categories {
///         for category in categories {
///             addCategoryBadge(category.name ?? "")
///         }
///     }
///
///     // Handle contact information
///     if let phones = location.phone {
///         for (type, number) in phones {
///             addPhoneButton(type: type, number: number)
///         }
///     }
/// }
///
/// // Navigate to location
/// func navigateToLocation(_ location: BCLocation) {
///     mapView.selectLocation(location: location)
///     mapView.focusTo(location: location)
/// }
///
/// \endcode<h2>Data Source</h2>
/// Location data is automatically cached when <code>BCMapView.renderSiteWith(clientId:clientSecret:siteId:)</code>
/// completes successfully. Access locations using <code>BCMapView.getLocations()</code> or through
/// search results from <code>BCMapView.searchForLocation(searchString:)</code>.
/// since:
/// 1.0.0
/// author:
/// Beco
SWIFT_CLASS("_TtC11becomap_ios10BCLocation")
@interface BCLocation : NSObject
/// Default initializer for BCLocation.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a floor within a building in the becomap system.
/// A floor contains the map data, viewport settings, and elevation information
/// for a specific level within a building. This class is used to manage floor-specific
/// data and provide navigation between different floors.
SWIFT_CLASS("_TtC11becomap_ios10BCMapFloor")
@interface BCMapFloor : NSObject
/// Default initializer for BCMapFloor.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BCMapViewDelegate;
@class NSCoder;
@class UIColor;
/// BCMapView is the main interface for displaying interactive indoor maps.
/// BCMapView is a custom UIView that embeds a WebView to display beCoMap interactive maps.
/// It provides comprehensive methods for indoor mapping, navigation, location services, and
/// real-time interaction with map features like floor selection, location focusing, and
/// route calculation.
/// <h2>Key Features</h2>
/// <ul>
///   <li>
///     <em>Interactive Indoor Maps</em>: Display detailed floor plans with zoom, pan, and rotation
///   </li>
///   <li>
///     <em>Location Services</em>: Search, select, and navigate to points of interest
///   </li>
///   <li>
///     <em>Multi-floor Navigation</em>: Seamless floor switching with route continuity
///   </li>
///   <li>
///     <em>Real-time Data</em>: Cached data access for immediate response
///   </li>
///   <li>
///     <em>Customizable Viewport</em>: Control zoom, pitch, bearing, and center coordinates
///   </li>
/// </ul>
/// <h2>Usage Example</h2>
/// \code
/// import becomap_ios
///
/// class MapViewController: UIViewController {
///     var mapView: BCMapView!
///
///     override func viewDidLoad() {
///         super.viewDidLoad()
///
///         mapView = BCMapView()
///         mapView.delegate = self
///         view.addSubview(mapView)
///
///         mapView.renderSiteWith(
///             clientId: "your_client_id",
///             clientSecret: "your_client_secret",
///             siteId: "your_site_id"
///         )
///     }
/// }
///
/// extension MapViewController: BCMapViewDelegate {
///     func mapView(_ mapView: BCMapView, didRenderSite site: BCSite) {
///         print("Site loaded: \(site.siteName ?? "Unknown")")
///         // Access cached data immediately
///         let locations = mapView.getLocations()
///         let categories = mapView.getCategories()
///     }
///
///     func mapView(_ mapView: BCMapView, didReceiveError payload: Any) {
///         print("Map error: \(payload)")
///     }
/// }
///
/// \endcode<h2>Architecture</h2>
/// The map communication is handled via a JavaScript bridge, allowing seamless interaction
/// between the iOS native code and the JavaScript map library loaded in the WebView.
/// All data is automatically cached for immediate synchronous access after initial loading.
/// <h2>Thread Safety</h2>
/// BCMapView is designed to be used from the main thread. All delegate callbacks are
/// delivered on the main queue, and all public methods should be called from the main thread.
/// since:
/// 1.0.0
/// author:
/// Beco
SWIFT_CLASS("_TtC11becomap_ios9BCMapView")
@interface BCMapView : UIView
/// The delegate object that receives map view callbacks and events.
/// Set this property to receive notifications about map state changes, user interactions,
/// data loading events, and error conditions. The delegate methods provide comprehensive
/// feedback about map operations and user interactions.
/// important:
/// The delegate is held as a weak reference to prevent retain cycles.
/// note:
/// All delegate methods are called on the main queue.
/// <h2>Required Delegate Methods</h2>
/// <ul>
///   <li>
///     <code>mapView(_:didRenderSite:)</code>: Called when site rendering completes successfully
///   </li>
///   <li>
///     <code>mapView(_:didReceiveError:)</code>: Called when errors occur during map operations
///   </li>
/// </ul>
/// <h2>Optional Delegate Methods</h2>
/// <ul>
///   <li>
///     <code>mapView(_:didLoadData:)</code>: Called when cache population completes
///   </li>
///   <li>
///     <code>mapView(_:didSelectLocation:)</code>: Called when user selects a location
///   </li>
///   <li>
///     <code>mapView(_:didSwitchFloor:)</code>: Called when user changes floors
///   </li>
///   <li>
///     And many more for comprehensive event handling
///   </li>
/// </ul>
@property (nonatomic, weak) id <BCMapViewDelegate> _Nullable delegate;
/// Creates a new BCMapView programmatically with the specified frame.
/// This is the designated initializer for creating BCMapView instances programmatically.
/// The view will be initialized with a WebView for map display and all necessary
/// internal components for map functionality.
/// <h2>Usage</h2>
/// \code
/// let mapView = BCMapView(frame: CGRect(x: 0, y: 0, width: 300, height: 400))
/// mapView.delegate = self
/// view.addSubview(mapView)
///
/// \endcodeimportant:
/// After initialization, set the delegate and call <code>renderSiteWith(clientId:clientSecret:siteId:)</code>
/// to begin loading map data.
/// note:
/// The view will automatically set up its WebView and internal components during initialization.
/// \param frame The frame rectangle for the view, measured in points.
/// This defines the initial size and position of the map view.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Creates a new BCMapView from Interface Builder (Storyboard or XIB).
/// This initializer is called automatically when the view is loaded from a storyboard
/// or XIB file. The view will be initialized with all necessary internal components.
/// <h2>Usage in Interface Builder</h2>
/// <ol>
///   <li>
///     Add a UIView to your storyboard
///   </li>
///   <li>
///     Set the custom class to <code>BCMapView</code>
///   </li>
///   <li>
///     Create an IBOutlet connection
///   </li>
///   <li>
///     Set the delegate and render the site in <code>viewDidLoad</code>
///   </li>
/// </ol>
/// \code
/// @IBOutlet weak var mapView: BCMapView!
///
/// override func viewDidLoad() {
///     super.viewDidLoad()
///     mapView.delegate = self
///     mapView.renderSiteWith(clientId: "id", clientSecret: "secret", siteId: "site")
/// }
///
/// \endcode\param coder The decoder object containing the archived view data.
///
///
/// returns:
/// An initialized BCMapView instance, or nil if initialization fails.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer that creates a BCMapView with zero frame.
/// This initializer creates a map view with a zero frame, which is useful when
/// you plan to set the frame later using Auto Layout or manual frame setting.
/// <h2>Usage</h2>
/// \code
/// let mapView = BCMapView()
/// mapView.delegate = self
/// mapView.translatesAutoresizingMaskIntoConstraints = false
/// view.addSubview(mapView)
///
/// // Set up Auto Layout constraints
/// NSLayoutConstraint.activate([
///     mapView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
///     mapView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
///     mapView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
///     mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
/// ])
///
/// \endcodenote:
/// Remember to set the frame or Auto Layout constraints after initialization.
- (nonnull instancetype)init;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@end

@class BCSite;
@class BCRouteSegment;
/// Protocol for receiving BCMapView callbacks, events, and data updates.
/// The BCMapViewDelegate protocol defines methods that respond to map view events,
/// user interactions, data loading completion, and error conditions. Implementing
/// this protocol allows your application to respond to map state changes and
/// provide appropriate user feedback.
/// <h2>Required Methods</h2>
/// All delegate implementations must provide the required methods:
/// <ul>
///   <li>
///     <code>mapView(_:didRenderSite:)</code>: Called when site rendering completes successfully
///   </li>
///   <li>
///     <code>mapView(_:didReceiveError:)</code>: Called when errors occur during map operations
///   </li>
/// </ul>
/// <h2>Optional Methods</h2>
/// Optional methods provide additional event handling for enhanced functionality:
/// <ul>
///   <li>
///     Data loading events
///   </li>
///   <li>
///     User interaction events
///   </li>
///   <li>
///     Navigation and route events
///   </li>
///   <li>
///     Search result events
///   </li>
/// </ul>
/// <h2>Thread Safety</h2>
/// All delegate methods are called on the main queue, making it safe to update
/// UI elements directly from delegate method implementations.
/// <h2>Usage Example</h2>
/// \code
/// class MapViewController: UIViewController, BCMapViewDelegate {
///     @IBOutlet weak var mapView: BCMapView!
///
///     override func viewDidLoad() {
///         super.viewDidLoad()
///         mapView.delegate = self
///         mapView.renderSiteWith(clientId: "id", clientSecret: "secret", siteId: "site")
///     }
///
///     // MARK: - Required Methods
///
///     func mapView(_ mapView: BCMapView, didRenderSite site: BCSite) {
///         print("Site loaded: \(site.siteName ?? "Unknown")")
///         // Access cached data immediately
///         let locations = mapView.getLocations()
///         updateLocationList(locations)
///     }
///
///     func mapView(_ mapView: BCMapView, didReceiveError payload: Any) {
///         print("Map error: \(payload)")
///         showErrorAlert("Failed to load map")
///     }
///
///     // MARK: - Optional Methods
///
///     func mapView(_ mapView: BCMapView, didSelectLocation location: BCLocation) {
///         showLocationDetails(location)
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// author:
/// Beco
SWIFT_PROTOCOL("_TtP11becomap_ios17BCMapViewDelegate_")
@protocol BCMapViewDelegate
/// Called when a site has been successfully loaded and rendered in the map view.
/// This is the primary success callback indicating that the map is ready for use.
/// After this method is called, the map is fully interactive and all cached data
/// access methods will return valid data.
/// <h2>When This Method Is Called</h2>
/// <ul>
///   <li>
///     Site authentication was successful
///   </li>
///   <li>
///     Site metadata and map data have been downloaded
///   </li>
///   <li>
///     The interactive map has been rendered and is ready for user interaction
///   </li>
///   <li>
///     Cache population has begun (will complete shortly after)
///   </li>
/// </ul>
/// <h2>What You Can Do</h2>
/// <ul>
///   <li>
///     Access cached data immediately using synchronous methods
///   </li>
///   <li>
///     Enable map-related UI controls
///   </li>
///   <li>
///     Show location lists or search interfaces
///   </li>
///   <li>
///     Begin location selection or navigation operations
///   </li>
/// </ul>
/// <h2>Example Implementation</h2>
/// \code
/// func mapView(_ mapView: BCMapView, didRenderSite site: BCSite) {
///     print("Site loaded: \(site.siteName ?? "Unknown")")
///     print("Buildings: \(site.buildings.count)")
///
///     // Enable UI controls
///     searchButton.isEnabled = true
///     locationButton.isEnabled = true
///
///     // Load initial data
///     let locations = mapView.getLocations()
///     let categories = mapView.getCategories()
///     updateLocationList(locations)
/// }
///
/// \endcodeimportant:
/// This method is called on the main queue, making it safe to update UI elements.
/// note:
/// Cache population may still be in progress when this method is called,
/// but synchronous data access methods will return valid cached data.
/// \param mapView The BCMapView instance that rendered the site
///
/// \param site The BCSite object containing complete site information including
/// buildings, floors, operation hours, and metadata
///
- (void)mapView:(BCMapView * _Nonnull)mapView didRenderSite:(BCSite * _Nonnull)site;
@optional
/// Called when the cache has been populated with all data after site rendering.
/// This optional delegate method is called after the site has been rendered and
/// all location, category, and amenity data has been loaded into the cache.
/// After this callback, all synchronous data access methods will return
/// complete cached data.
/// <h2>When This Method Is Called</h2>
/// <ul>
///   <li>
///     Site rendering has completed successfully
///   </li>
///   <li>
///     All locations, categories, amenities, and happenings have been cached
///   </li>
///   <li>
///     The cache state has changed to <code>.ready</code>
///   </li>
///   <li>
///     Synchronous data access methods are now fully populated
///   </li>
/// </ul>
/// <h2>What You Can Do</h2>
/// <ul>
///   <li>
///     Populate location lists with complete data
///   </li>
///   <li>
///     Enable search functionality
///   </li>
///   <li>
///     Show category filters
///   </li>
///   <li>
///     Display amenity information
///   </li>
/// </ul>
/// <h2>Example Implementation</h2>
/// \code
/// func mapView(_ mapView: BCMapView, didLoadData success: Bool) {
///     if success {
///         let locations = mapView.getLocations()
///         let categories = mapView.getCategories()
///         let amenities = mapView.getAmenityLocations()
///
///         updateLocationList(locations)
///         setupCategoryFilters(categories)
///         enableSearchFunctionality()
///     } else {
///         showErrorMessage("Failed to load map data")
///     }
/// }
///
/// \endcodenote:
/// This method is called on the main queue.
/// important:
/// Even if success is false, some data may still be available in the cache.
/// \param mapView The BCMapView instance that loaded the data
///
/// \param success Boolean indicating if cache population was successful.
/// <code>true</code> means all data was loaded successfully,
/// <code>false</code> indicates there were errors during data loading.
///
- (void)mapView:(BCMapView * _Nonnull)mapView didLoadData:(BOOL)success;
/// mapView:didChangeView:
/// <ul>
///   <li>
///     Called when the map view changes (zoom, pan, etc.).
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param payload Any object containing view change data
///
- (void)mapView:(BCMapView * _Nonnull)mapView didChangeView:(id _Nonnull)payload;
/// mapView:didSelectLocation:
/// <ul>
///   <li>
///     Called when a location is selected on the map.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param location Any object containing location selected
///
- (void)mapView:(BCMapView * _Nonnull)mapView didSelectLocation:(BCLocation * _Nonnull)location;
/// mapView:didSwitchFloor:
/// <ul>
///   <li>
///     Called when the floor is switched on the map.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param floor Any object containing floor  data
///
- (void)mapView:(BCMapView * _Nonnull)mapView didSwitchFloor:(BCMapFloor * _Nonnull)floor;
/// mapView:didLoadStep:
/// <ul>
///   <li>
///     Called when a route step is loaded.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param step Any object containing step data
///
- (void)mapView:(BCMapView * _Nonnull)mapView didLoadStep:(id _Nonnull)step;
/// mapView:didEndWalkthrough:
/// <ul>
///   <li>
///     Called when route walkthrough ends.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
- (void)mapViewDidEndWalkthrough:(BCMapView * _Nonnull)mapView;
/// mapView:didReceiveCurrentFloor:
/// <ul>
///   <li>
///     Called when the current visible floor is determined or updated.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param floor The currently visible BCMapFloor
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveCurrentFloor:(BCMapFloor * _Nonnull)floor;
/// mapView:didReceiveRoute:
/// <ul>
///   <li>
///     Called when a navigation route is received.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param route Array of BCRouteSegment objects representing the navigation path
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveRoute:(NSArray<BCRouteSegment *> * _Nonnull)route;
/// mapView:didReceiveSearchResults:
/// <ul>
///   <li>
///     Called when a search query returns BCLocation results.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param results Array of BCLocation search results
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveSearchResults:(NSArray<BCLocation *> * _Nonnull)results;
/// mapView:didReceiveSearchCategories:
/// <ul>
///   <li>
///     Called when category search results are received.
///   </li>
/// </ul>
/// \param mapView BCMapView reference
///
/// \param payload Any object containing category search results
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveSearchCategories:(NSArray<BCCategory *> * _Nonnull)categories;
@required
/// Called when an error occurs during map operations or initialization.
/// This method is called whenever the map encounters an error that prevents
/// normal operation. Errors can occur during site loading, authentication,
/// network communication, or map rendering.
/// <h2>Common Error Scenarios</h2>
/// <ul>
///   <li>
///     <em>Authentication Failure</em>: Invalid client credentials
///   </li>
///   <li>
///     <em>Network Errors</em>: No internet connection or server unavailable
///   </li>
///   <li>
///     <em>Site Not Found</em>: Invalid site ID or site not accessible
///   </li>
///   <li>
///     <em>Rendering Errors</em>: Map data corruption or rendering failures
///   </li>
///   <li>
///     <em>Permission Errors</em>: Insufficient permissions to access site data
///   </li>
/// </ul>
/// <h2>Error Payload</h2>
/// The payload parameter contains error information that may include:
/// <ul>
///   <li>
///     Error messages and descriptions
///   </li>
///   <li>
///     HTTP status codes for network errors
///   </li>
///   <li>
///     Detailed error context for debugging
///   </li>
/// </ul>
/// <h2>Recommended Error Handling</h2>
/// \code
/// func mapView(_ mapView: BCMapView, didReceiveError payload: Any) {
///     print("Map error: \(payload)")
///
///     // Parse error information
///     if let errorDict = payload as? [String: Any],
///        let message = errorDict["message"] as? String {
///         showErrorAlert(message)
///     } else {
///         showErrorAlert("Failed to load map. Please try again.")
///     }
///
///     // Disable map-related UI
///     searchButton.isEnabled = false
///     locationButton.isEnabled = false
///
///     // Optionally retry after delay
///     DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
///         self.retryMapLoading()
///     }
/// }
///
/// \endcode<h2>Recovery Strategies</h2>
/// important:
/// This method is called on the main queue, making it safe to update UI elements.
/// note:
/// After an error occurs, the map may be in an unusable state until
/// <code>renderSiteWith(clientId:clientSecret:siteId:)</code> is called again successfully.
/// <ul>
///   <li>
///     Display user-friendly error messages
///   </li>
///   <li>
///     Disable map-dependent UI elements
///   </li>
///   <li>
///     Provide retry mechanisms for transient errors
///   </li>
///   <li>
///     Log detailed error information for debugging
///   </li>
///   <li>
///     Fallback to cached data if available
///   </li>
/// </ul>
/// \param mapView The BCMapView instance that encountered the error
///
/// \param payload Error information object containing details about the failure.
/// The structure varies depending on the error type.
///
- (void)mapView:(BCMapView * _Nonnull)mapView didReceiveError:(id _Nonnull)payload;
@end

/// Represents viewport options for the map display.
/// This class contains settings that control how the map is displayed, including
/// zoom level, camera angle, orientation, and center position. These options
/// are used to configure the initial view and programmatically control the map view.
SWIFT_CLASS("_TtC11becomap_ios16BCMapViewOptions")
@interface BCMapViewOptions : NSObject
/// Default initializer for BCMapViewOptions.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents operating hours for a location or facility.
/// This class contains information about when a location is open and closed,
/// including the days of the week and specific opening/closing times.
/// Used for displaying availability information to users.
SWIFT_CLASS("_TtC11becomap_ios15BCOperationHour")
@interface BCOperationHour : NSObject
/// Default initializer for BCOperationHour.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents options for route calculation and navigation.
/// This class contains settings that control how routes are calculated,
/// including distance thresholds and accessibility preferences for
/// generating optimal navigation paths.
SWIFT_CLASS("_TtC11becomap_ios14BCRouteOptions")
@interface BCRouteOptions : NSObject
/// Default initializer for BCRouteOptions.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a segment of a navigation route.
/// A route segment contains multiple steps that form a logical part of the journey,
/// typically representing movement within a specific area or floor. Segments are
/// combined to form complete navigation routes between locations.
SWIFT_CLASS("_TtC11becomap_ios14BCRouteSegment")
@interface BCRouteSegment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents a single step in a navigation route.
/// A route step contains detailed instructions for a specific part of the journey,
/// including the action to take, direction, distance, and floor information.
/// Steps are combined to form complete route segments.
SWIFT_CLASS("_TtC11becomap_ios11BCRouteStep")
@interface BCRouteStep : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents a site/location in the beCoMap system.
/// A site is a physical location (such as a shopping mall, airport, hospital, office complex,
/// or university campus) that contains multiple buildings, floors, and points of interest.
/// This class serves as the root container for all venue-related data and provides comprehensive
/// metadata about the site including its address, contact information, operating hours,
/// available languages, and structural organization.
/// <h2>Site Hierarchy</h2>
/// \code
/// BCSite
/// ├── buildings: [BCBuilding]
/// │   └── floors: [BCMapFloor]
/// │       └── locations: [BCLocation]
/// ├── operationHours: [BCOperationHour]
/// ├── languages: [BCLanguage]
/// └── imageUrls: BCImageURLs
///
/// \endcode<h2>Usage Example</h2>
/// \code
/// func mapView(_ mapView: BCMapView, didRenderSite site: BCSite) {
///     print("Loaded site: \(site.siteName ?? "Unknown")")
///     print("Address: \(site.address ?? ""), \(site.city ?? "")")
///     print("Buildings: \(site.buildings.count)")
///
///     // Access building information
///     for building in site.buildings {
///         print("Building: \(building.name ?? "Unnamed") - \(building.floors.count) floors")
///     }
///
///     // Find a specific floor
///     if let groundFloor = site.getFloor(withId: "ground-floor") {
///         print("Found ground floor: \(groundFloor.name ?? "")")
///     }
/// }
///
/// \endcode<h2>Data Source</h2>
/// Site data is automatically populated when <code>BCMapView.renderSiteWith(clientId:clientSecret:siteId:)</code>
/// is called successfully. The data is parsed from the beCoMap service response and cached
/// for immediate access.
/// since:
/// 1.0.0
/// author:
/// Beco
SWIFT_CLASS("_TtC11becomap_ios6BCSite")
@interface BCSite : NSObject
/// Unique identifier for the site.
/// This is the primary key used to identify the site in the beCoMap system.
/// It’s used in API calls and for caching purposes.
/// note:
/// This ID is provided by beCoMap and should not be modified.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Human-readable name of the site.
/// The display name of the venue, such as “Westfield Shopping Center”,
/// “John F. Kennedy International Airport”, or “General Hospital”.
/// <h2>Usage</h2>
/// \code
/// titleLabel.text = site.siteName ?? "Unknown Location"
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nullable siteName;
/// Type or category of the site.
/// Indicates the general category of the venue, such as:
/// <ul>
///   <li>
///     “MALL” for shopping centers
///   </li>
///   <li>
///     “AIRPORT” for airports
///   </li>
///   <li>
///     “HOSPITAL” for medical facilities
///   </li>
///   <li>
///     “OFFICE” for office complexes
///   </li>
///   <li>
///     “UNIVERSITY” for educational campuses
///   </li>
/// </ul>
/// This can be used for customizing UI or behavior based on venue type.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Street address of the site.
/// The physical street address including street number and name.
/// Example: “123 Main Street” or “1000 Airport Boulevard”
@property (nonatomic, readonly, copy) NSString * _Nullable address;
/// City where the site is located.
/// The city name where the venue is situated.
/// Example: “New York”, “Los Angeles”, “Toronto”
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State or province where the site is located.
/// The state, province, or administrative region.
/// Example: “NY”, “California”, “Ontario”
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// ISO country code for the site’s location.
/// Two-letter ISO 3166-1 alpha-2 country code.
/// Examples: “US”, “CA”, “GB”, “AU”, “DE”
/// <h2>Usage</h2>
/// \code
/// let flagEmoji = countryCodeToFlag(site.countryCode ?? "US")
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// Postal or ZIP code of the site.
/// The postal code for the site’s address.
/// Examples: “10001”, “90210”, “M5V 3A8”
@property (nonatomic, readonly, copy) NSString * _Nullable postal;
/// Primary contact telephone number for the site.
/// The main phone number for the venue, typically for general inquiries
/// or customer service. Format may vary by region.
/// <h2>Usage</h2>
/// \code
/// if let phone = site.telephone {
///     let url = URL(string: "tel:\(phone)")
///     UIApplication.shared.open(url!)
/// }
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nullable telephone;
/// Website URL for the site.
/// The official website or landing page for the venue.
/// Can be used to provide additional information or services.
/// <h2>Usage</h2>
/// \code
/// if let urlString = site.link, let url = URL(string: urlString) {
///     UIApplication.shared.open(url)
/// }
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nullable link;
/// Timezone identifier for the site’s location.
/// IANA timezone identifier (e.g., “America/New_York”, “Europe/London”).
/// Used for displaying local times and handling time-sensitive operations.
/// <h2>Usage</h2>
/// \code
/// if let tzId = site.tzId {
///     let timeZone = TimeZone(identifier: tzId)
///     let formatter = DateFormatter()
///     formatter.timeZone = timeZone
/// }
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nullable tzId;
/// UTC offset in hours for the site’s timezone.
/// String representation of the timezone offset from UTC.
/// Examples: “-5” (EST), “+1” (CET), “+9” (JST)
/// note:
/// This is a string to handle fractional offsets like “+5:30”
@property (nonatomic, readonly, copy) NSString * _Nullable utcOffset;
/// Array of buildings within this site.
/// Contains all buildings that are part of this venue. Each building
/// contains floors, and each floor contains locations and points of interest.
/// <h2>Usage</h2>
/// \code
/// for building in site.buildings {
///     print("Building: \(building.name ?? "Unnamed")")
///     for floor in building.floors {
///         print("  Floor: \(floor.name ?? "Unnamed")")
///     }
/// }
///
/// \endcodenote:
/// Even single-building sites will have at least one BCBuilding object.
@property (nonatomic, readonly, copy) NSArray<BCBuilding *> * _Nonnull buildings;
/// URLs for site images in different sizes and formats.
/// Contains URLs for various site images including logos, banners,
/// and promotional images in different resolutions for different use cases.
/// <h2>Usage</h2>
/// \code
/// if let imageUrls = site.imageUrls {
///     // Load appropriate image based on screen size
///     let imageUrl = imageUrls.large ?? imageUrls.medium ?? imageUrls.small
///     loadImage(from: imageUrl)
/// }
///
/// \endcode
@property (nonatomic, readonly, strong) BCImageURLs * _Nullable imageUrls;
/// Operating hours for different days of the week
@property (nonatomic, readonly, copy) NSArray<BCOperationHour *> * _Nonnull operationHours;
/// Additional languages supported by the site
@property (nonatomic, readonly, copy) NSArray<BCLanguage *> * _Nullable otherLanguages;
/// Primary language for the site
@property (nonatomic, readonly, strong) BCLanguage * _Nullable defaultLanguage;
/// Geographic center coordinates [latitude, longitude]
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull center;
/// Default map identifier for the site
@property (nonatomic, readonly, copy) NSString * _Nullable defaultMap;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
